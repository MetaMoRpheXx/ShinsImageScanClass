;Image/pixel scanning class by Spawnova (5/15/22)
;https://github.com/Spawnova/ShinsImageScanClass
;
;General purpose class to scan image data for images and pixels, for ahk_L (not compatible with ahk V2)
;
;Image transparency is not handled in this class, if an image contains pixels that are not fully opaque they are simply ignored;
;which can be used to match images with portions that should be ignored by having those pixels be less than 0xFF000000
;
;I designed this class to be relatively user friendly but still maintain good performance
;I can't promise it will work for every setup, I can only confirm that it works for me on windows 10 (32 and 64 bit)
;
;All returned coordinate positions are in client space, with the exception when scanning the desktop which uses screen space

class ShinsImageScanClass {

	;title		:		ahk window title or other type of identifier, leave blank or set to 0 to scan the entire desktop
	__New(title:=0) {
	
		this.AutoUpdate 		:= 1 	;when disabled, requires you to call Update() manually to refresh pixel data, useful when you need to scan multiple things on 1 frame
		
		this.UseControlClick 	:= 0  	;when enabled attempts to use ControlClick to send clicks which works for background programs
										;not all programs will respond to this however, so it may be necessary to use normal clicks which have to be foreground
		
		
		;#############################
		;	Setup internal stuff
		;#############################
		if (!DllCall("GetModuleHandle", "str", "gdiplus", "Ptr"))
			DllCall("LoadLibrary", "str", "gdiplus")
		VarSetCapacity(gsi, 24, 0)
		NumPut(1,gsi,0,"uint")
		DllCall("gdiplus\GdiplusStartup", "Ptr*", token, "Ptr", &gsi, "Ptr", 0)
		this.gdiplusToken := token
		
		this.bits := (a_ptrsize == 8) ;0=32,1=64
		this.desktop := (title = 0 or title = "")
		this.imageCache := []
		
		if (this.desktop)
			coordmode,mouse,screen
		else
			coordmode,mouse,client

		this._ScanImage := this.mcode("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")
		this._ScanImageRegion := this.mcode("VVdWU4PsKItUJEyLXCRUi3QkRItEJESLfCRIA3wkUIhcJAQB1oXAD4jjBAAAi2wkSIXtD4jXBAAAi0QkQItsJECLAIttBIksJInFicHB7RDB+RA56g+MpwQAAA+30IlUJBA5VCRQD4yWBAAAi1QkPA+3UghmOcoPgowEAACLTCQ8D7dJCmY5wQ+CewQAACnuK3wkEI1C/4lUJBQ58g9PxolEJCAPt8GNUP85+InQD0/HiUQkJITbD4XNAAAAizwkhf8PhHgDAAA7RCRID44DAgAAiemLbCQ8i0QkIDtEJEQPjtwBAACLRCREiUQkCOsgizQki10AAcY7FLN0X4NEJAgBi0QkCDlEJCAPhLIBAACLdCQQhfZ+X8dEJAQAAAAAhcl+RIt0JASLXCRAifAPr8GNPIOLRCRIAfAPr0QkFIt0JAiNHDAxwIkcJJCNdCYAi1SHCIH6/////neUg8ABOcF17ZCNdCYAg0QkBAGLdCQEOXQkEH+pi0QkCMHgEANEJEiDxChbXl9dw4sMJIXJD4RrAQAAO0QkSA+ONgEAAA+2RCQEiWwkBItsJDyJRCQMi0QkIDtEJEQPjiQBAACLRCREiUQkHOt1kI20JgAAAACLRCQIjRQwi0UAixSQidjB+BCJ0Q+2wMH5EA+2ySnBD7bGD7bSic/B/x8x+Sn5D7b/D7bbKfiJx8H/HzH4Kfg5wQ9NwSnaidPB+x8x2inaOdAPTMI7RCQMfmmDRCQcAYtEJBw5RCQgD4SlAAAAi1QkEIXSfmrHRCQYAAAAAItEJASFwH5Li3QkGItcJEAPr8aNBIOJBCSLRCRIAfAPr0QkFANEJBwx9olEJAiQjXQmAIsEJItcsAiB+/////4Phz3///+DxgE5dCQEdeSNdCYAg0QkGAGLdCQYOXQkEH+ei0QkHMHgEANEJEiDxChbXl9dw4NEJEgBi0QkJDtEJEgPhQP+//+DxCi4/////1teX13Dg0QkSAGLRCQkO0QkSA+Fu/7//+veifaNvCcAAAAAO0QkSH7PD7ZEJASJbCQEiUQkCItEJCA7RCRED479AAAAi0QkRIlEJBjrGJCNdCYAg0QkGAGLRCQYOUQkIA+E2wAAAItEJBCFwA+OvAAAAMdEJAwAAAAAi3QkBIX2D46VAAAAi3wkPItcJAyLRCRIixcB2A+vRCQUA0QkGI0EgokEJInwi3QkQA+vw40shjH2iwQki1y1CIsUsInYwfgQidEPtsDB+RAPtskpwQ+2xg+20onPwf8fMfkp+Q+2/w+22yn4icfB/x8x+Cn4OcEPTcEp2onRwfkfMcopyjnQD0zCO0QkCA+PRf///4PGATl0JAR1nI10JgCDRCQMAYt0JAw5dCQQD49M////i0QkGMHgEANEJEiDxChbXl9dw4NEJEgBi0QkJDtEJEgPheL+///pn/7//412AI28JwAAAAA7RCRID46L/v//i3wkPItEJCA7RCRED46OAAAAi3QkROsPjbYAAAAAg8YBOXQkIHR5i1wkEIXbfmAx25CNdCYAhe1+TItEJEiLF4kcJAHYD69EJBQB8I0Mgonoi1QkQA+vw40UgjHAifaNvCcAAAAAi1yCCDkcgXWvg8ABOcV18IscJIPDAesLkI20JgAAAACDwwE5XCQQf6eJ8MHgEANEJEiDxChbXl9dw4NEJEgBi0QkJDtEJEgPhVH////p0/3//7j8////69m4/v///+vSuP3////ry5CQkJCQkJCQkA==|QVdBVkFVQVRVV1ZTSIPsOESLlCSgAAAAi4QkqAAAAESJ00iJzouMJLAAAABFicxJidVEiYQkkAAAAEQBw0WNHARED7bJRYXAD4jwBAAARYXkD4jnBAAAixJFi0UEidWJ18HtEMH/EEE56g+MugQAAEQPt/pEOfgPjK0EAABED7dWEGZBOfoPgqgEAAAPt0YSZjnQD4KbBAAAQQ+3+inrRSn7jVf/Od+JfCQMD0/TRDnYiVQkKEGJ1o1Q/0EPT9OJVCQshMkPhC0BAABFhcAPhDwCAABEOWQkLA+OEQIAAESJfCQgQQ+2+U2J74tEJCg7hCSQAAAAD477AQAARIu0JJAAAADrd2YuDx+EAAAAAABIixZJY8CJ2Q+278H5EA+224sUgg+2yYnQwfgQD7bAKciJwcH5HzHIKciJwQ+2xg+20inoQYnCQcH6H0Qx0EQp0DnBD03BKdqJ0cH5HzHKKco50A9Mwjn4fm2LbCQQQYPGAUQ5dCQoD4R6AQAAi1QkIIXSD44+AQAAQo1ENQBFMe2JRCQYDx8Ahe0PjhgBAACJ6EeNHCyJbCQQQQ+vxUQPr1wkDEiYR40EHk2NTIcIRANcJBgPH0AAQYsZgfv////+D4c5////QYPAAUmDwQRFOcN15ItsJBBBg8UB6csAAAAPH4AAAAAARYXAD4RnAgAARDniD47mAAAARDu0JJAAAAAPjskAAABEi5wkkAAAAOsfZg8fRAAATIsWSGPIRTsEinRQQYPDAUU53g+EoAAAAEWF/35jRTHSQo1cHQBmkIXtfkyJ6EeNDBREiVQkDEEPr8JED6/PSJhJjVSFCEONBAtBAdkPHwBEiwJBgfj////+d6SDwAFIg8IEQTnBdehEi1QkDEGDwgHrCQ8fRAAAQYPCAUU513+nRInYweAQRAHg6xwPH0AAQYPFAUQ5bCQgD4/R/v//RInwweAQRAHgSIPEOFteX11BXEFdQV5BX8NBg8QBRDlkJCwPhRr///+4/////+vZQYPEAUQ5ZCQsD4Xl/f//6+gPH4QAAAAAAEQ5ZCQsftmNRf9EiXwkIEiJRCQQSY1FDEiJRCQYi0QkKDuEJJAAAAAPjhIBAACLhCSQAAAATGO8JJAAAACJRCQk6xwPH0QAAINEJCQBSYPHAYtEJCQ5RCQoD4ThAAAAi0QkIIXAD47MAAAARTH2he0PjrIAAABDjQQ0SIsWSIt8JBgPr0QkDEiYTAH4TI0EgonoQQ+vxkiYSY1MhQhIA0QkEEyNFIdmLg8fhAAAAAAAQYsQixmJ0EGJ2w+2/w+228H4EEHB+xBFD7bbD7bARCnYQYnDQcH7H0Qx2EQp2EGJww+2xg+20in4icfB/x8x+Cn4QTnDQQ9NwynaQYnTQcH7H0Qx2kQp2jnQD0zCRDnID48y////SIPBBEmDwARJOcp1jQ8fRAAAQYPGAUQ5dCQgD483////i0QkJOl6/v//QYPEAUQ5ZCQsD4XO/v//6Yz+//8PH0AARDlkJCwPjn3+//9EjU3/RDu0JJAAAAAPjpEAAABMY5wkkAAAAIucJJAAAADrFmYuDx+EAAAAAACDwwFJg8MBQTnedGpFhf9+WEUx0oXtfkhDjQQiSIsWD6/HSJhMAdhMjQSCiehBD6/CSJhJjUyFADHAZg8fRAAAi1SBCEE5FIB1tkiNUAFJOcF0DUiJ0OvoDx+EAAAAAABBg8IBRTnXf6uJ2MHgEEQB4Om6/f//QYPEAUQ5ZCQsD4VS////6cb9//+4/P///+mc/f//uP7////pkv3//7j9////6Yj9//+QkJCQkJCQkA==")
		this._ScanImageCount := this.mcode("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")
		this._ScanImageCountRegion := this.mcode("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")
		this._ScanImageArray := this.mcode("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")
		this._ScanImageArrayRegion := this.mcode("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")
		this._ScanPixel := this.mcode("VVdWU4PsHIt0JDCLTCQwi1QkOItcJDQPt34KD7dJCIl8JBCE0g+ExQAAAIX/D4StAAAAD7bCidrHRCQYAAAAAMHqEIlEJAgPtsMPtvLHRCQUAAAAAIk0JA+294l0JASJRCQMhcl0YotEJDCLdCQYiwCNLLAxwItchQCJ2sH6EA+28is0JInywfofMdYp1g+21ytUJAQPttuJ18H/HzH6Kfo51g9M8itcJAyJ38H/HzH7Kfs53g9N3jtcJAgPjp4AAACDwAE5wXWtg0QkFAGLRCQUAUwkGDlEJBB1h410JgC4/////+tSifaNvCcAAAAAi0QkEIHj////AIXAdOKNBI0AAAAAMe0x/4kEJIXJdDiLVCQwMcCLMgHu6wuNdCYAg8ABOcF0IYsUhoHi////ADnadezB4BAB+IPEHFteX13DjbQmAAAAAIPHAQMsJDl8JBB1uOuKjXYAjbwnAAAAAMHgEANEJBSDxBxbXl9dw5A=|QVdBVkFVQVRVV1ZTSIPsGEQPt1kQRA+3YRJBD7b4RYTAD4S5AAAARYXkD4SoAAAAidXHRCQMAAAAAA+2xkUx/8HtEEGJxkQPtspAD7btRYXbdG9IY0QkDEiLETHbTI0sgkGLVJ0AQYnaidDB+BAPtsAp6EGJwEHB+B9EMcBEKcBBicAPtsYPttJEKfCJxsH+HzHwKfBBOcBBD03ARCnKQYnQQcH4H0QxwkQpwjnQD0zCOfgPjqcAAABIg8MBQTnbf59Bg8cBRAFcJAxFOfwPhXr///8PH0AAuP/////rUpCB4v///wBBidFFheR06jHbRTH/RYXbdFBIixFIY8NMjRSCMdLrE2YuDx+EAAAAAABIg8IBQTnTfi9FiwSSidBBgeD///8ARTnIdeXB4BBEAfhIg8QYW15fXUFcQV1BXkFfw2YPH0QAAEGDxwFEAdtFOfx1n+uCZi4PH4QAAAAAAEHB4hBDjQQ668eQkJCQkJA=")
		this._ScanPixelRegion := this.mcode("VVdWU4PsHItMJDwDTCREi1wkOIt8JDSJDCSLTCQ4i0QkSANcJECFyQ+IkwEAAItUJDyF0g+IhwEAAItsJDAPt20IjVX/Od2JbCQUD07ai1QkMA+3Ugo7FCSNSv8PTwwkiQwkhMAPhNUAAAA7TCQ8D467AAAAicYPr2wkPIn4wegQD7bAiUQkBIn4D7bEiWwkGIlEJAiJ8A+2wIlEJAyJ+A+2wIlEJBA7XCQ4fmWLRCQwi3QkGIsAjSywi3QkOItUtQCJ0cH5EA+2yStMJASJyMH4HzHBKcEPtsYrRCQID7bSicfB/x8x+Cn4OcEPTMgrVCQQidfB/x8x+in6OdEPTdE7VCQMD46lAAAAg8YBOfN1rIt0JBSDRCQ8AQF0JBiLBCQ7RCQ8D4V7////jXQmALj/////61SJ9o28JwAAAACJ/oHm////ADtMJDx+4onvi2wkPMHnAg+v7ztcJDh+OItUJDCLRCQ4iwoB6esJZpCDwAE5w3QhixSBgeL///8AOfJ17MHgEANEJDyDxBxbXl9dw5CNdCYAg0QkPAGLBCQB/TtEJDx1suuGjbYAAAAAi0QkPMHmEIPEHFsB8F5fXcO4/f///+vDkJCQkJCQkJA=|QVdBVkFVQVRVV1ZTSIPsGIuEJJAAAABEi5wkgAAAAIu8JIgAAABED7bgRQHDRAHPRYXAD4iBAQAARYXJD4h4AQAAD7dpEESNVf9EOd1FD07aRA+3URJBjVr/QTn6D077hMAPhMgAAABEOc8PjrcAAABEichBidUPtvKJfCQID6/FQcHtEIlsJAyJ9UUPtu2JRCQED7bGicdFOcN+b0hjRCQESIsRSWPYTI08gkGLFJ9Bid6J0MH4EA+2wEQp6EGJwkHB+h9EMdBEKdBBicIPtsYPttIp+InGwf4fMfAp8EE5wkEPTcIp6kGJ0kHB+h9EMdJEKdI50A9MwkQ54A+OrQAAAEiDwwFBOdt/oIt0JAxBg8EBAXQkBEQ5TCQID4V1////Dx9EAAC4/////+tRkIHi////AEQ5z37tRYnMRA+v5UU5w35RSIsZSWPETWPQSI00g+sTZi4PH4QAAAAAAEmDwgFFOdN+L0KLHJZEidCB4////wA503XmweAQRAHISIPEGFteX11BXEFdQV5BX8MPH4AAAAAAQYPBAUEB7EQ5z3We64JmLg8fhAAAAAAAQcHmEEONBA7rxrj9////67+QkJCQkJCQkJCQkJCQkJA=")
		this._ScanPixelCount := this.mcode("VVdWU4PsJIt0JDiLVCRAi1wkPA+3TggPt3YKiUwkEIl0JBiE0g+E5QAAAIX2D4RNAQAAD7bCidqNNI0AAAAAx0QkHAAAAACJRCQIweoQD7bDiXQkIA+28sdEJBQAAAAAiUQkDIl0JAQPtveJNCQx9otMJBCFyXRyi0QkOItcJByLTCQgiwCNFJ0AAAAAjSwIjRwQAdWNdgCLEw+2zisMJInQD7bSic/B+BDB/x8PtsArRCQEMfkp+YnHwf8fMfgp+DnBD0zIK1QkDInXwf8fMfop+jnRD03RMcA7VCQID57Ag8MEAcY53XWug0QkFAGLTCQQi0QkFAFMJBw5RCQYD4Vr////g8QkifBbXl9dw5CLVCQYgeP///8AhdJ0YonIMe0x/zH2weACiQQkjXQmAItEJBCFwHQxi0QkOI0MrQAAAACLEI0ECgMUJAHRjXYAixCB4v///wA50w+UwoPABA+20gHWOcF154PHAQNsJBA5fCQYdbqDxCSJ8FteX13Dg8QkMfZbifBeX13DkJCQkA==|QVdBVkFVQVRVV1ZTSIPsGEmJzUEPtvCJ0UEPt0USRQ+3ZRCJRCQERYTAD4TgAAAAhcAPhCcCAABBjUQk/4nXD7buRTH/SIlEJAjB7xBFMfZFMdtAD7b/D7bKZg8fRAAARYXkdHxJi1UASWPHTI0MgkgDRCQISI1cggRmDx9EAABBixEPtsYp6EGJwEHB+B9EMcBEKcBBicCJ0A+20sH4EA+2wCn4QYnCQcH6H0Qx0EQp0EE5wEEPTcApykGJ0EHB+B9EMcJEKcI50A9MwjnwD57ASYPBBA+2wEEBw0w5y3WfQYPGAUUB50Q5dCQED4Vt////RInYSIPEGFteX11BXEFdQV5BX8NmDx+EAAAAAACJx4Hh////AIXAD4Q/AQAARInjRYniZg9u4THSwesCQY10JP9Bg+L8RTHJZg9vFQAAAABIweMERTHbZg9w3ACQRYXkD4TqAAAATYtFAIP+Aw+G8gAAAEhjwmYP78lJjQSASI0sAw8fAPMPbwBIg8AQZg/bwmYPdsNmD/rISDnFdedmD2/BZg9z2AhmD/7IZg9vwWYPc9gEZg/+yGYPfshBAcNEidBFOdQPhIUAAACNLAJIY+1BiyyogeX///8AOc1AD5TFQA+27UEB641oAUE57H5gAdVIY+1BiyyogeX///8AOelAD5TFQA+27UEB641oAkE57H48AdVIY+1BiyyogeX///8AOc1AD5TFg8ADQA+27UEB60Q54H0YAdBImEGLBIAl////ADnID5TAD7bAQQHDQYPBAUQB4kQ5zw+F/f7//+mb/v//McDpX////0Ux2+mM/v//kJCQkJCQkJCQ////AP///wD///8A////AA==")
		this._ScanPixelCountRegion := this.mcode("VVdWU4PsKItcJESLTCREi2wkSIt8JECLRCRUA0wkTANsJFCF2w+IyQEAAItUJEiF0g+IvQEAAIt0JDwPt3YIOc6NVv+JdCQYD0/Ri0wkPIlUJBAPt1EKjUr/OeoPT82JTCQUhMAPhPUAAAA7TCRID45zAQAAicOLRCREi1QkEA+vdCRIweACiUQkII0ElQAAAACJRCQkifjB6BCJdCQcMfYPtsCJRCQEifgPtsSJBCQPtsOJRCQIifgPtsCJRCQMi0QkEDtEJER+cItEJDyLXCQgiyiLRCQcweACAcMB6wNsJCQBxY12AIsTD7bOKwwkidAPttKJz8H4EMH/Hw+2wCtEJAQx+Sn5icfB/x8x+Cn4OcEPTMgrVCQMidfB/x8x+in6OdEPTdExwDtUJAgPnsCDwwQBxjndda6LXCQYg0QkSAEBXCQci0QkFDtEJEgPhWv///+DxCiJ8FteX13DkIn7geP///8AO0wkSH56i0QkRIt8JEiLbCRIweACD6/+MfaJBCSLRCQQweACiUQkBItEJBA7RCREfjeLRCQ8jQy9AAAAAIsQiwQkAcgB0ANUJAQB0Y10JgCLEIHi////ADnTD5TCg8AED7bSAdY5wXXng8UBA3wkGDlsJBR1soPEKInwW15fXcODxCgx9luJ8F5fXcO+/f///+lX////kJA=|QVdBVkFVQVRVV1ZTSIPsKIuEJKAAAABEi7QkkAAAAIucJJgAAAAPtvBEiYQkgAAAAEmJzUUBxkQBy0WFwA+IvgIAAEWFyQ+ItQIAAA+3eRCNT/9EOfeJfCQERA9O8UEPt00SRI1B/znZRA9Pw0SJBCSEwA+FlwEAAIHi////AEQ5DCQPjnACAABBifpEifcrvCSAAAAAi5wkgAAAAIn4QYn/jXf/Zg9vFQAAAADB6AJBg+f8Zg9u4ol0JAhIweAERQ+v0WYPcNwARAH7SIlEJBBIY4QkgAAAAIP+Aw9GnCSAAAAARTHkSIlEJBiNSwGNcwKNawMPHwBEO7QkgAAAAA+O4QAAAIN8JAgDTYtdAHZeTItEJBBJY8JIA0QkGGYP78lJjQSDSQHADx+AAAAAAPMPbwBIg8AQZg/bwmYPdsNmD/rITDnAdedmD2/BZg9z2AhmD/7IZg9vwWYPc9gEZg/+yGYPfshBAcREOf90eEGNBBpImEGLBIMl////ADnQD5TAD7bAQQHEQTnOfllBjQQKSJhBiwSDJf///wA5wg+UwA+2wEEBxEE59n46QY0EMkiYQYsEgyX///8AOdAPlMAPtsBBAcREOfV9G0KNRBUASJhBiwSDJf///wA50A+UwA+2wEEBxEGDwQFEA1QkBEQ5DCQPhf7+//9EieBIg8QoW15fXUFcQV1BXkFfw2aQRTnID47gAAAAi4QkgAAAAEEPr/kPtu5FMeRIY4wkgAAAAPfQRAHwQYn/iddIiUwkCEgByMHvEA+2ykiJRCQQQA+2/w8fRAAARDu0JIAAAAB+f0iLXCQISYtVAEljx0yNBBhIA0QkEE6NFIJIjVyCBEGLEg+2xinoQYnAQcH4H0QxwEQpwEGJwInQD7bSwfgQD7bAKfhBicNBwfsfRDHYRCnYQTnAQQ9NwCnKQYnQQcH4H0QxwkQpwjnQD0zCOfAPnsBJg8IED7bAQQHETDnTdZ9Bg8EBRAN8JAREOQwkD4Vk////6QH///9FMeTp+f7//0G8/f///+nu/v//kJCQkP///wD///8A////AP///wA=")
		this._ScanPixelCountRadius := this.mcode("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")
		this._ScanPixelPosition := this.mcode("V1ZTi1QkEItcJBiLdCQcD7dCCItMJCA52A+GkQAAAA+3ego59w+GhQAAAA+vxosSvgEAAAAB2ItcJBSLFIKB4////wCJ0CX///8AOdh0UzH2hMl0TYnGid8PttIPtsTB7xDB/hAPtskp/on3wf8fMf4p/g+2+w+23yn6idfB/x8x+in6OdYPTdYp2InDwfsfMdgp2DnCD0zQMcA50Q+dwInGifBbXl/DkI20JgAAAAC+/v///+vrkJCQkJCQkJCQ|D7dBEESLVCQoRDnAD4aeAAAARA+3WRJFOcsPhpAAAABED6/ISIsBgeL///8ARQHIQosMgEG4AQAAAInIJf///wA50HRkRTHARYTSdFxFD7bKQYnAQYnSD7bJQcHqEEHB+BAPtsRFKdBFicJBwfofRTHQRSnQRA+20g+21kQp0UGJykHB+h9EMdFEKdFBOchBD03IKdCZMdAp0DnBD0zIRTHAQTnJQQ+dwESJwMMPHwBBuP7////r8ZCQkJCQkJCQ")
		
		if (!this.desktop and !this.hwnd := winexist(title)) {
			msgbox % "Could not find window: " title "!`n`nScanner will not function!"
			return
		}
		if (!this.GetClientSize(gw,gh))
			return
			
		this.width := gw
		this.height := gh
		this.srcDC := DllCall("GetDC", "Ptr", (this.desktop ? 0 : this.hwnd))
		this.dstDC := DllCall("CreateCompatibleDC", "Ptr", 0)
		this.tBufferPtr := tBufferPtr := this.SetVarCapacity("ttBuffer",4096,0)
		this.dataPtr := dataPtr := this.SetVarCapacity("_data",64,0)
		NumPut(tBufferPtr,dataPtr+0,(this.bits ? 8 : 4),"Ptr")
		this.CreateDIB()
	}
	
	
	;####################################################################################################################################################################################################################################
	;Image
	;
	;image				:				Path to image file
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;
	;return				;				Returns 1 if the image was found; 0 otherwise
	
	Image(image,variance=0,ByRef returnX=0,ByRef returnY=0) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		data := DllCall(this._ScanImage,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uchar",variance,"int")
		if (data > 0) {
			returnX := data >> 16
			returnY := data & 0xFFFF
			return 1
		}
		return 0
	}
	
	
	;####################################################################################################################################################################################################################################
	;ImageRegion
	;
	;image				:				Path to image file
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w					:				Width of pixels to search, starting from x1
	;h					:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;
	;return				;				Returns 1 if the image was found in the specified region; 0 otherwise
	
	ImageRegion(image,x1,y1,w,h,variance=0,ByRef returnX=0,ByRef returnY=0) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		data := DllCall(this._ScanImageRegion,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uint",x1,"uint",y1,"uint",w,"uint",h,"uchar",variance,"int")
		if (data > 0) {
			returnX := data >> 16
			returnY := data & 0xFFFF
			return 1
		}
		return 0
	}
	
	
	;####################################################################################################################################################################################################################################
	;ImageCount
	;
	;image				:				Path to image file
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of images found; 0 otherwise
	
	ImageCount(image,variance=0) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanImageCount,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}
	
	
	;####################################################################################################################################################################################################################################
	;ImageCountRegion
	;
	;image				:				Path to image file
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w					:				Width of pixels to search, starting from x1
	;h					:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of images found in the specified region; 0 otherwise
	
	ImageCountRegion(image,x1,y1,w,h,variance=0) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanImageCountRegion,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uint",x1,"uint",y1,"uint",w,"uint",h,"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}


	;####################################################################################################################################################################################################################################
	;ImageClosestToPoint
	;
	;image				:				Path to image file
	;pointX				:				x position of the point
	;pointY				:				y position of the point
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;centerResults		:				Value between 0-1, if enabled the positions returned will be centered as oposed to top left of the target image
	;									This also affects distance calculations for closest image
	;MaxRadius			:				Maximum circular radius to search in; lower values require images to be closer to the point
	;
	;return				;				Returns 1 if an image was found close enough to the point; 0 otherwise
	
	ImageClosestToPoint(image,pointX,pointY,variance=0,byref returnX=0,byref returnY=0,centerResults=1,maxRadius=9999) {
		if (!c := this.ImageArray(image,a,variance,centerResults))
			return 0
		min := maxRadius
		i := 0
		loop % c {
			xd := a[a_index].x - pointX
			yd := a[a_index].y - pointY
			dist := sqrt(xd*xd + yd*yd)
			if (dist < min) {
				min := dist
				i := a_index
			}
		}
		if (i = 0)
			return 0
		returnX := a[i].x
		returnY := a[i].y
		return 1
	}
	
	
	;####################################################################################################################################################################################################################################
	;ImageArray
	;
	;image				:				Path to image file
	;&array				:				An array which will hold all the image locations (first element would be array[1].x and array[1].y)
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;centerResults		:				Value between 0-1, if enabled the positions returned will be centered as oposed to top left of the target image
	;
	;return				;				Returns 1 (and updates &array) if any number of images were found; 0 otherwise
	
	ImageArray(image,byref array,variance=0,centerResults=1) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		count := DllCall(this._ScanImageArray,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uchar",variance,"uchar",centerResults,"int")
		if (count > 0) {
			array := []
			loop % count {
				v := NumGet(this.tBufferPtr,(a_index-1)*4,"uint")
				array.push({x:v>>16,y:v&0xFFFF})
			}
			return count
		}
		return 0
	}
	
	
	;####################################################################################################################################################################################################################################
	;ImageArrayRegion
	;
	;image				:				Path to image file
	;&array				:				An array which will hold all the image locations (first element would be array[1].x and array[1].y)
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w					:				Width of pixels to search, starting from x1
	;h					:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;centerResults		:				Value between 0-1, if enabled the positions returned will be centered as oposed to top left of the target image
	;
	;return				;				Returns 1 (and updates &array) if any number of images were found in the specified region; 0 otherwise
	
	ImageArrayRegion(image,byref array,x1,y1,w,h,variance=0,centerResults=1) {
		if (!this.CacheImage(image))
			return 0
		if (this.AutoUpdate)
			this.Update()
		count := DllCall(this._ScanImageArrayRegion,"Ptr",this.dataPtr,"Ptr",this.imageCache[image],"uchar",variance,"uchar",centerResults,"int")
		if (count > 0) {
			array := []
			loop % count {
				v := NumGet(this.tBufferPtr,(a_index-1)*4,"uint")
				array.push({x:v>>16,y:v&0xFFFF})
			}
			return count
		}
		return 0
	}
	
	
	;####################################################################################################################################################################################################################################
	;Pixel
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;
	;return				;				Returns 1 if pixel was found; 0 otherwise
	
	Pixel(color,variance=0,ByRef returnX=0,ByRef returnY=0) {
		if (!this.CheckColorFormat(color))
			return 0
		if (this.AutoUpdate)
			this.Update()
		data := DllCall(this._ScanPixel,"Ptr",this.dataPtr,"Uint",color,"uchar",variance,"int")
		if (data > 0) {
			returnX := data >> 16
			returnY := data & 0xFFFF
			return 1
		}
		return 0
	}
	
	
	;####################################################################################################################################################################################################################################
	;PixelRegion
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w					:				Width of pixels to search, starting from x1
	;h					:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;&returnX			:				Variable to store the x result into
	;&returnY			:				Variable to store the y result into
	;
	;return				;				Returns 1 if a pixel inside the specified region was found; 0 otherwise
	
	PixelRegion(color,x1,y1,w,h,variance=0,byref returnX=0,byref returnY=0) {
		if (!this.CheckColorFormat(color))
			return 0
		if (this.AutoUpdate)
			this.Update()
		data := DllCall(this._ScanPixelRegion,"Ptr",this.dataPtr,"Uint",color,"uint",x1,"uint",y1,"uint",w,"uint",h,"uchar",variance,"int")
		if (data > 0) {
			returnX := data >> 16
			returnY := data & 0xFFFF
			return 1
		}
		return 0
	}
	
	
	;####################################################################################################################################################################################################################################
	;PixelPosition
	;
	;color				:				Color of pixel to match at a given position(can be in 0xRRGGBB or 0xFFRRGGBB format)
	;pointX				:				X position
	;pointY				:				Y position
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns 1 if the color matched at the specified position; 0 otherwise
	
	PixelPosition(color,pointX,pointY,variance=0) {
		if (!this.CheckColorFormat(color))
			return 0
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanPixelPosition,"Ptr",this.dataPtr,"Uint",color,"uint",pointX,"uint",pointY,"uint",variance,"int")
		return (c == 1 ? 1 : 0)
	}
	
	
	;####################################################################################################################################################################################################################################
	;PixelCount
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of matching pixels; 0 otherwise
	
	PixelCount(color,variance=0) {
		if (!this.CheckColorFormat(color))
			return 0
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanPixelCount,"Ptr",this.dataPtr,"Uint",color,"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}
	
	
	;####################################################################################################################################################################################################################################
	;PixelCountRegion
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;x1					:				Top left starting x position
	;y1					:				Top left starting y position
	;w					:				Width of pixels to search, starting from x1
	;h					:				Height of pixels to search, starting from y1
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of matching pixels in the specified region; 0 otherwise
	
	PixelCountRegion(color,x1,y1,w,h,variance=0) {
		if (!this.CheckColorFormat(color))
			return 0
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanPixelCountRegion,"Ptr",this.dataPtr,"Uint",color,"uint",x1,"uint",y1,"uint",w,"uint",h,"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}
	
	
	
	;####################################################################################################################################################################################################################################
	;PixelCountRadius
	;
	;color				:				Color of pixel to find (can be in 0xRRGGBB or 0xFFRRGGBB format)
	;pointX				:				X position
	;pointY				:				Y position
	;radius				:				Radius to search in
	;variance			:				Value between 0-255, determines how close/far pixels must be to match the target color
	;
	;return				;				Returns the amount of matching pixels in a specified radius; 0 otherwise
	
	PixelCountRadius(color,pointX,pointY,radius,variance=0) {
		if (!this.CheckColorFormat(color))
			return 0
		if (this.AutoUpdate)
			this.Update()
		c := DllCall(this._ScanPixelCountRadius,"Ptr",this.dataPtr,"Uint",color,"uint",pointX,"uint",pointY,"uint",radius,"uchar",variance,"int")
		return (c > 0 ? c : 0)
	}
	
	
	;####################################################################################################################################################################################################################################
	;GetPixel
	;
	;pointX				:				X position
	;pointY				:				Y position
	;
	;return				;				Returns the pixel at the pointX,pointY location
	
	GetPixel(pointX,pointY) {
		if (this.AutoUpdate)
			this.Update()
		if (pointX < 0 or pointY < 0 or pointX >= this.width or pointY >= this.height) {
			msgbox % "Cannot get a pixel at position: " pointX "," pointY " as it lies outside of the source region!"
			return 0
		}
		return NumGet(this.temp0,(pointX+pointY*this.width)*4,"uint")
	}
	
	
	;####################################################################################################################################################################################################################################
	;SaveImage
	;
	;name				:				Name to save to file to
	;
	;return				;				Saves the current pixel buffer to a png image
	
	SaveImage(name) {
		if (!InStr(name,".png"))
			name .= ".png"
		if (this.autoUpdate)
			this.Update()
		DllCall("gdiplus\GdipCreateBitmapFromHBITMAP", "Ptr", this.hbm, "Ptr", 0, "Ptr*", bm)
		
		;largely borrowed from tic function, encoder stuff is a pain
		DllCall("gdiplus\GdipGetImageEncodersSize", "uint*", nCount, "uint*", nSize)
		VarSetCapacity(ci, nSize)
		DllCall("gdiplus\GdipGetImageEncoders", "uint", nCount, "uint", nSize, "Ptr", &ci)
		if !(nCount && nSize) {
			msgbox % "Problem getting encoder information"
			return 0
		}
		Loop % nCount {
			sString := StrGet(NumGet(ci, (idx := (48+7*A_PtrSize)*(A_Index-1))+32+3*A_PtrSize), "UTF-16") ;Thanks tic, this particularily confused me!
			if (InStr(sString, "*.PNG")) {
				pCodec := &ci+idx
				break
			}
		}
		if (!pCodec) {
			msgbox % "Problem finding png codec"
			return 0
		}
		DllCall("gdiplus\GdipSaveImageToFile", "Ptr", bm, "Ptr", &name, "Ptr", pCodec, "uint", 0)
	}
	
	
	;####################################################################################################################################################################################################################################
	;Click
	;
	;pointX				:				X position to click
	;pointY				:				Y position to click
	;button				:				Type of click (left,right,middle)
	;
	;return				;				Returns 1 on success; 0 otherwise
	;
	;notes				:				ControlClick will not work for every application
	
	Click(pointX,pointY,button:="left") {
		if (this.UseControlClick) {
			t := "ahk_id " this.hwnd
			ControlClick, x%pointX% y%pointY%, %t%,,%button%,,NA
		} else {
			if (!WinActive("ahk_id " this.hwnd)) {
				msgbox % "Attempting to click in target window but it is not active!`n`nIf you want to click inactive windows set 'UseControlClick' to true after initializing the class"
				return 0
			}
			click,%pointX%,%pointY%,%button%
		}
		return 1
	}
	
	
	;####################################################################################################################################################################################################################################
	;ClickDrag
	;
	;pointX1			:				X position to start click
	;pointY1			:				Y position to start click
	;pointX2			:				X position to end click
	;pointY2			:				Y position to end click
	;button				:				Type of click (left,right,middle)
	;
	;return				;				Returns 1 on success; 0 otherwise
	;
	;notes				:				ControlClick will not work for every application
	
	ClickDrag(pointX1,pointY1,pointX2,pointY2,button:="left") {
		if (this.UseControlClick) {
			t := "ahk_id " this.hwnd
			ControlClick, x%pointX1% y%pointY1%, %t%,,%button%,,NA D
			sleep 10
			ControlClick, x%pointX2% y%pointY2%, %t%,,%button%,,NA U
		} else {
			if (!WinActive("ahk_id " this.hwnd)) {
				msgbox % "Attempting to click in target window but it is not active!`n`nIf you want to click inactive windows set 'UseControlClick' to true after initializing the class"
				return 0
			}
			MouseClickDrag,%button%,%pointX1%,%pointY1%,%pointX2%,%pointY2%
		}
		return 1
	}
	
	
	;####################################################################################################################################################################################################################################
	;ClickRegion
	;
	;pointX				:				X position to click
	;pointY				:				Y position to click
	;w					:				Width of region
	;h					:				Height of region
	;button				:				Type of click (left,right,middle)
	;
	;return				;				Returns 1 on success; 0 otherwise
	;
	;notes				:				Clicks randomly within the specified region
	
	ClickRegion(pointX,pointY,w,h,button:="left") {
		pointX += this.Random(0,w)
		pointY += this.Random(0,h)
		return this.Click(pointX,pointY,button)
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	;########################################## 
	;  internal functions used by the class
	;########################################## 
	CheckColorFormat(byref color) {
		if (color < 0xFF000000) {
			if (color > 0xFFFFFF) {
				msgbox % "Partial color transparency is not supported!`n`nPixel scanning arguments for color must be in 0xFFRRGGBB or 0xRRGGBB format!"
				return 0
			} else {
				color += 0xFF000000
			}
		}
		return 1
	}
	CheckWindow() {
		if (this.desktop)
			return 1
		DllCall("GetClientRect","Ptr",this.hwnd,"Ptr",this.tBufferPtr)
    	w := NumGet(this.tBufferPtr+0,8)
    	h := NumGet(this.tBufferPtr+0,12)
		if (w = 0 or h = 0)
			return 0
		if (w != this.width or h != this.height) {
			this.width := w
			this.height := h
			DllCall("DeleteObject","Ptr",this.hbm)
			this.CreateDIB()
		}
		return 1
	}
	CreateDIB() {
		VarSetCapacity(_scan,8)
		VarSetCapacity(bi,40,0)
		NumPut(this.width,bi,4,"int")
		NumPut(-this.height,bi,8,"int")
		NumPut(40,bi,0,"uint")
		NumPut(1,bi,12,"ushort")
		NumPut(32,bi,14,"ushort")
		this.hbm := DllCall("CreateDIBSection", "Ptr", this.dstDC, "Ptr", &bi, "uint", 0, "Ptr*", _scan, "Ptr", 0, "uint", 0, "Ptr")
		this.temp0 := _scan
		NumPut(_scan,this.dataPtr,0,"Ptr")
		NumPut((this.height<<16)+this.width,this.dataPtr,(this.bits ? 16 : 8),"uint")
		DllCall("SelectObject", "Ptr", this.dstDC, "Ptr", this.hbm)
	}
	SetVarCapacity(key,size,fill=0) {
		this.SetCapacity(key,size)
		DllCall("RtlFillMemory","Ptr",this.GetAddress(key),"Ptr",size,"uchar",fill)
		return this.GetAddress(key)
	}
	_Delete() {
		DllCall("gdiplus\GdiplusShutdown", "Ptr*", this.gdiplusToken)
	}
	CacheImage(image) {
		if (this.imageCache.haskey(image))
			return 1
		if (image = "") {
			msgbox % "Error, expected resource image path but empty variable was supplied!"
			return 0
		}
		if (!FileExist(image)) {
			msgbox % "Error finding resource image: '" image "' does not exist!"
			return 0
		}
		if (!A_IsUnicode) {
			VarSetCapacity(wchar, strlen(image)*2)
			DllCall("kernel32\MultiByteToWideChar", "uint", 0, "uint", 0, "Ptr", &image, "int", -1, "Ptr", &wchar, "int", strlen(image))
			DllCall("gdiplus\GdipCreateBitmapFromFile", "Ptr", &wchar, "Ptr*", bm)
		} else
			DllCall("gdiplus\GdipCreateBitmapFromFile", "Ptr", &image, "Ptr*", bm)
		DllCall("gdiplus\GdipGetImageWidth", "Ptr", bm, "Uint*", w)
		DllCall("gdiplus\GdipGetImageHeight", "Ptr", bm, "Uint*", h)
		VarSetCapacity(r,16)
		NumPut(x,r,0,"uint")
		NumPut(y,r,4,"uint")
		NumPut(w,r,8,"uint")
		NumPut(h,r,12,"uint")
		VarSetCapacity(bmdata, 32, 0)
		DllCall("Gdiplus\GdipBitmapLockBits", "Ptr", bm, "Ptr", &r, "uint", 3, "int", 0x26200A, "Ptr", &bmdata)
		scan := NumGet(bmdata, 16, "Ptr")
		p := DllCall("GlobalAlloc", "uint", 0x40, "ptr", 16+((w*h)*4), "ptr")
		NumPut((w<<16)+h,p+0,0,"uint")
		loop % ((w*h)*4)
			NumPut(NumGet(scan+0,a_index-1,"uchar"),p+0,a_index+7,"uchar")
		loop % (w*h)
			if (NumGet(scan+0,(a_index-1)*4,"uint") < 0xFF000000) {
				NumPut(1,p+4,"uint")
				break
			}
		DllCall("Gdiplus\GdipBitmapUnlockBits", "Ptr", bm, "Ptr", &bmdata)
		DllCall("gdiplus\GdipDisposeImage", "ptr", bm)
		this.ImageCache[image] := p
		return 1
	}
	Update() {
		if (this.CheckWindow())
			DllCall("gdi32\BitBlt", "Ptr", this.dstDC, "int", 0, "int", 0, "int", this.width, "int", this.height, "Ptr", this.srcDC, "int", 0, "int", 0, "uint", 0xCC0020)
	}
	GetClientSize(ByRef w, ByRef h) {
		if (this.desktop) {  ;only gets primary screen for now, I may add support for virtual later
			w := a_screenwidth
			h := a_screenheight
			return 1
		}
		VarSetCapacity(r, 16)
		if (!DllCall("GetClientRect", "Ptr", this.hwnd, "Ptr", &r)) {
			msgbox % "Problem getting client rectangle, is window minimized?`n`nScanner will not function!"
			return 0
		}
		w := NumGet(r, 8, "int")
		h := NumGet(r, 12, "int")
		if (w = 0 or h = 0) {
			msgbox % "Problem with client rectangle dimensions, is window minimized?`n`nScanner will not function!"
			return 0
		}
		return 1
	}
	Random(min,max) {
		random,result,min,max
		return result
	}
	Mcode(str) {
		s := strsplit(str,"|")
		if (s.length() != 2)
			return
		if (!DllCall("crypt32\CryptStringToBinary", "str", s[this.bits+1], "uint", 0, "uint", 1, "ptr", 0, "uint*", pp, "ptr", 0, "ptr", 0))
			return
		p := DllCall("GlobalAlloc", "uint", 0, "ptr", pp, "ptr")
		if (this.bits)
			DllCall("VirtualProtect", "ptr", p, "ptr", pp, "uint", 0x40, "uint*", op)
		if (DllCall("crypt32\CryptStringToBinary", "str", s[this.bits+1], "uint", 0, "uint", 1, "ptr", p, "uint*", pp, "ptr", 0, "ptr", 0))
			return p
		DllCall("GlobalFree", "ptr", p)
	}
}
